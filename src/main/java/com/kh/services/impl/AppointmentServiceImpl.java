package com.kh.services.impl;

import com.kh.dtos.AppointmentDTO;
import com.kh.dtos.EmailDTO;
import com.kh.dtos.MedicalRecordDTO;
import com.kh.enums.AppointmentSlot;
import com.kh.enums.UserRole;
import com.kh.pojo.Appointment;
import com.kh.pojo.MedicalRecord;
import com.kh.pojo.User;
import com.kh.repositories.AppointmentRepository;
import com.kh.repositories.MedicalRecordRepository;
import com.kh.repositories.UserRepository;
import com.kh.services.AppointmentService;

import java.nio.file.AccessDeniedException;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.stream.Collectors;

import com.kh.services.EmailService;
import com.kh.utils.DateUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

@Service
public class AppointmentServiceImpl implements AppointmentService {
    @Autowired
    private AppointmentRepository appointmentRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private MedicalRecordRepository medicalRecordRepository;

    @Autowired
    private EmailService emailService;


    @Override
    public AppointmentDTO addAppointment(AppointmentDTO appointmentDTO, String patientUsername) {
        // L·∫•y th√¥ng tin b√°c sƒ© v√† b·ªánh nh√¢n
        User doctor = this.userRepository.
                findDoctorById(appointmentDTO.getDoctorId())
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y b√°c sƒ©!"));
        User patient = this.userRepository
                .findByUsername(patientUsername)
                .orElseThrow(() -> new UsernameNotFoundException("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!"));

        AppointmentSlot timeSlot = AppointmentSlot.fromSlotNumber(appointmentDTO.getTimeSlot());

        // Ki·ªÉm tra l·ªãch c·ªßa b√°c sƒ©
        if (appointmentRepository.isDoctorTimeSlotTaken(
                doctor,
                appointmentDTO.getAppointmentDate(),
                timeSlot
        )) {
            throw new IllegalArgumentException("B√°c sƒ© ƒë√£ c√≥ l·ªãch v√†o ca n√†y.");
        }

        // Chuy·ªÉn ƒë·ªïi DTO th√†nh entity
        Appointment appointment = new Appointment();
        appointment.setDoctorId(doctor);
        appointment.setPatientId(patient);
        appointment.setAppointmentDate(appointmentDTO.getAppointmentDate());
        appointment.setNote(appointmentDTO.getNote());
        appointment.setTimeSlot(timeSlot);
        appointment.setStatus("scheduled"); // Tr·∫°ng th√°i m·∫∑c ƒë·ªãnh khi t·∫°o

        // L∆∞u v√†o database
        Appointment savedAppointment = appointmentRepository.save(appointment);

        sendAppointmentEmailToPatient(patient, doctor, savedAppointment);
        sendAppointmentEmailToDoctor(patient, doctor, savedAppointment);


        // Chuy·ªÉn entity th√†nh DTO ƒë·ªÉ tr·∫£ v·ªÅ
        return new AppointmentDTO(savedAppointment);
    }

    private void sendAppointmentEmailToPatient(User patient, User doctor, Appointment appointment) {
        EmailDTO email = new EmailDTO();
        String formattedDate = DateUtils.formatVietnameseDate(appointment.getAppointmentDate());

        email.setToEmail(patient.getEmail());
        email.setSubject("X√°c nh·∫≠n l·ªãch h·∫πn kh√°m v·ªõi b√°c sƒ© " + doctor.getFirstName() + " " + doctor.getLastName());

        String body = String.format(
                "K√≠nh ch√†o %s %s,\n\n" +
                        "B·∫°n ƒë√£ ƒë·∫∑t l·ªãch h·∫πn th√†nh c√¥ng v·ªõi b√°c sƒ© %s %s.\n\n" +
                        "üóì Ng√†y kh√°m: %s\n" +
                        "‚è∞ Ca kh√°m: %s\n" +
                        "üìù Ghi ch√∫: %s\n\n" +
                        "Vui l√≤ng ƒë·∫øn s·ªõm 15 ph√∫t ƒë·ªÉ l√†m th·ªß t·ª•c tr∆∞·ªõc khi kh√°m.\n\n" +
                        "Tr√¢n tr·ªçng,\nPh√≤ng kh√°m ABC",
                patient.getLastName(),
                patient.getFirstName(),
                doctor.getLastName(),
                doctor.getFirstName(),
                formattedDate,
                appointment.getTimeSlot().getSlotNumber(),
                appointment.getNote() == null || appointment.getNote().isEmpty() ? "Kh√¥ng c√≥" : appointment.getNote()
        );

        email.setBody(body);
        emailService.sendEmail(email);
    }

    private void sendAppointmentEmailToDoctor(User patient, User doctor, Appointment appointment) {
        EmailDTO email = new EmailDTO();
        String formattedDate = DateUtils.formatVietnameseDate(appointment.getAppointmentDate());

        email.setToEmail(doctor.getEmail());
        email.setSubject("L·ªãch h·∫πn m·ªõi t·ª´ b·ªánh nh√¢n " + patient.getFirstName() + " " + patient.getLastName());

        String body = String.format(
                "K√≠nh g·ª≠i B√°c sƒ© %s %s,\n\n" +
                        "M·ªôt b·ªánh nh√¢n m·ªõi ƒë√£ ƒë·∫∑t l·ªãch h·∫πn kh√°m v·ªõi b√°c sƒ©.\n\n" +
                        "üë§ T√™n b·ªánh nh√¢n: %s %s\n" +
                        "üóì Ng√†y kh√°m: %s\n" +
                        "‚è∞ Ca kh√°m: %s\n" +
                        "üìù Ghi ch√∫: %s\n\n" +
                        "Vui l√≤ng ki·ªÉm tra l·ªãch l√†m vi·ªác c·ªßa m√¨nh ƒë·ªÉ chu·∫©n b·ªã tr∆∞·ªõc bu·ªïi kh√°m.\n\n" +
                        "Tr√¢n tr·ªçng,\nH·ªá th·ªëng qu·∫£n l√Ω l·ªãch h·∫πn",
                doctor.getLastName(),
                doctor.getFirstName(),
                patient.getLastName(),
                patient.getFirstName(),
                formattedDate,
                appointment.getTimeSlot().getSlotNumber(),
                appointment.getNote() == null || appointment.getNote().isEmpty() ? "Kh√¥ng c√≥" : appointment.getNote()
        );

        email.setBody(body);
        emailService.sendEmail(email);
    }


    @Override
    public List<AppointmentDTO> getAppointments(String username, String status) {
        // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!"));

        // L·∫•y danh s√°ch l·ªãch h·∫πn theo vai tr√≤
        List<Appointment> appointments;

        if (user.getRole() == UserRole.PATIENT) {
            // N·∫øu l√† b·ªánh nh√¢n, l·∫•y danh s√°ch c√°c l·ªãch h·∫πn c·ªßa b·ªánh nh√¢n
            appointments = appointmentRepository.findByPatientId(user.getId(), status);
        } else if (user.getRole() == UserRole.DOCTOR) {
            // N·∫øu l√† b√°c sƒ©, l·∫•y danh s√°ch c√°c l·ªãch h·∫πn c·ªßa b√°c sƒ©
            appointments = appointmentRepository.findByDoctorId(user.getId(), status);
        } else {
            // N·∫øu kh√¥ng ph·∫£i l√† b·ªánh nh√¢n hay b√°c sƒ©, tr·∫£ v·ªÅ l·ªói
            throw new IllegalArgumentException("Ch·ªâ b·ªánh nh√¢n ho·∫∑c b√°c sƒ© m·ªõi c√≥ th·ªÉ truy c·∫≠p l·ªãch h·∫πn.");
        }

        // Chuy·ªÉn danh s√°ch appointment th√†nh danh s√°ch DTO
        return appointments.stream()
                .map(AppointmentDTO::new)
                .collect(Collectors.toList());
    }

    @Override
    public AppointmentDTO getAppointmentDetails(Long appointmentId, String username)
            throws AccessDeniedException, NoSuchElementException {
        // L·∫•y chi ti·∫øt l·ªãch kh√°m t·ª´ repository
        Appointment appointment = appointmentRepository.findById(appointmentId)
                .orElseThrow(() -> new NoSuchElementException("Kh√¥ng t√¨m th·∫•y l·ªãch kh√°m v·ªõi ID: " + appointmentId));

        // Ki·ªÉm tra quy·ªÅn h·ª£p l·ªá
        boolean isPatient = appointment.getPatientId().getUsername().equals(username);
        boolean isDoctor = appointment.getDoctorId().getUsername().equals(username);
        if (!isPatient && !isDoctor) {
            throw new AccessDeniedException("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p l·ªãch h·∫πn n√†y.");
        }

        AppointmentDTO dto = new AppointmentDTO(appointment);

        MedicalRecord medicalRecord = appointment.getMedicalRecord();

        if (medicalRecord != null) {
            MedicalRecordDTO medicalRecordDTO = new MedicalRecordDTO(medicalRecord);
            dto.setMedicalRecord(medicalRecordDTO);
        }

        return dto;
    }


    public Long countPatientsCompletedByMonth(int year, int month) {
        return appointmentRepository.countDistinctPatientsCompletedByMonth(year, month);
    }

    public Long countPatientsCompletedByQuarter(int year, int quarter) {
        return appointmentRepository.countDistinctPatientsCompletedByQuarter(year, quarter);
    }

    public Long countPatientsCompleted() {
        return appointmentRepository.countDistinctPatientsCompleted();
    }
}