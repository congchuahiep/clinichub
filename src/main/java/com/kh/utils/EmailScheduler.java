package com.kh.utils;

import com.kh.dtos.EmailDTO;
import com.kh.pojo.Appointment;
import com.kh.repositories.AppointmentRepository;
import com.kh.services.EmailService;
import com.kh.utils.DateUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.util.Date;
import java.util.List;

@Component
public class EmailScheduler {

    @Autowired
    private AppointmentRepository appointmentRepository;

    @Autowired
    private EmailService emailService;

    /**
     * H√†m ch·∫°y t·ª± ƒë·ªông m·ªói ng√†y v√†o l√∫c 00:00 ƒë·ªÉ ki·ªÉm tra v√† g·ª≠i email nh·∫Øc nh·ªü tr∆∞·ªõc 24 gi·ªù.
     */
    @Scheduled(cron = "0 40 20 * * *") // M·ªói ng√†y v√†o l√∫c 00:00
    public void sendReminderEmails() {
        // L·∫•y th·ªùi ƒëi·ªÉm hi·ªán t·∫°i v√† th·ªùi ƒëi·ªÉm 24 gi·ªù sau
        Date now = new Date();
        Date next24Hours = new Date(now.getTime() + (24 * 60 * 60 * 1000));

        // L·∫•y t·∫•t c·∫£ c√°c l·ªãch h·∫πn trong kho·∫£ng 24 gi·ªù ti·∫øp theo
        List<Appointment> appointments = appointmentRepository.findAppointmentsBetweenDates(now, next24Hours);

        // G·ª≠i email nh·∫Øc nh·ªü cho t·ª´ng b·ªánh nh√¢n c√≥ l·ªãch h·∫πn
        for (Appointment appointment : appointments) {
            sendReminderToPatient(appointment);
        }
    }

    /**
     * G·ª≠i email nh·∫Øc nh·ªü t·ªõi b·ªánh nh√¢n.
     */
    private void sendReminderToPatient(Appointment appointment) {
        String formattedDate = DateUtils.formatVietnameseDate(appointment.getAppointmentDate());

        EmailDTO email = new EmailDTO();
        email.setToEmail(appointment.getPatientId().getEmail());
        email.setSubject("Nh·∫Øc nh·ªü l·ªãch kh√°m b√°c sƒ© v√†o ng√†y mai");

        String body = String.format(
                "K√≠nh ch√†o %s %s,\n\n" +
                        "H·ªá th·ªëng nh·∫Øc nh·ªü b·∫°n r·∫±ng b·∫°n c√≥ l·ªãch kh√°m v·ªõi b√°c sƒ© %s %s v√†o ng√†y mai.\n\n" +
                        "Chi ti·∫øt l·ªãch h·∫πn:\n" +
                        "üóì Ng√†y kh√°m: %s\n" +
                        "‚è∞ Ca kh√°m: %s\n" +
                        "üìù Ghi ch√∫: %s\n\n" +
                        "Vui l√≤ng ƒë·∫øn s·ªõm 15 ph√∫t ƒë·ªÉ l√†m th·ªß t·ª•c tr∆∞·ªõc khi kh√°m.\n\n" +
                        "Tr√¢n tr·ªçng,\nPh√≤ng kh√°m ABC",
                appointment.getPatientId().getLastName(),
                appointment.getPatientId().getFirstName(),
                appointment.getDoctorId().getLastName(),
                appointment.getDoctorId().getFirstName(),
                formattedDate,
                appointment.getTimeSlot().getSlotNumber(),
                appointment.getNote() == null || appointment.getNote().isEmpty() ? "Kh√¥ng c√≥" : appointment.getNote()
        );

        email.setBody(body);
        emailService.sendEmail(email);
    }
}
